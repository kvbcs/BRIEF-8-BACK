// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid()) @db.VarChar(36)
  firstName       String  @db.VarChar(255)
  lastName        String  @db.VarChar(255)
  email           String  @unique() @db.VarChar(255)
  password        String  @db.VarChar(150)
  agendaId        String  @db.VarChar(36)
  roleId          String  @default(uuid()) @db.VarChar(36)
  isActive        Boolean  @default(false)
  activationToken String
  gdpr            DateTime  @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  agenda          Agenda[]
  role            Role @relation(fields:[roleId], references: [id])
}

model Role {
  id        String   @id @default(uuid()) @db.VarChar(36)
  name      String   @unique @db.VarChar(20)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users     User[]
}

model Event {
  id        String   @id @default(uuid()) @db.VarChar(36)
  title          String   @db.VarChar(255)
  image          String 
  description    String    @db.VarChar(255)
  categoryId     String  @db.VarChar(36)
  startDate      DateTime
  endDate        DateTime
  maxParticipants Int 
  price          Float
  isAvailable    Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  category       Category @relation(fields: [categoryId], references: [id])
  agendas        Agenda_Has_Event[]
}

model Category {
  id           String   @id @default(uuid()) @db.VarChar(36)
  name         String   @unique @db.VarChar(36)
  image        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  events       Event[]
}

model Agenda {
  id    String   @id @default(uuid()) @db.VarChar(36)
  userId  String @default(uuid()) @db.VarChar(36)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User @relation(fields: [userId], references: [id])
  events      Agenda_Has_Event[]
}

model Agenda_Has_Event {
  agendaId   String   @db.VarChar(36)
  eventId    String   @db.VarChar(36)
  quantity    Int

  agenda     Agenda  @relation(fields: [agendaId], references: [id])
  event      Event   @relation(fields: [eventId], references: [id])

  @@id([agendaId, eventId])
}